options {
	JAVA_UNICODE_ESCAPE=true;
	STATIC=false;					// 1 seul parseur actif a la fois (+ rapide)
	MULTI=true;						// type noeud = f(nom noeud)
	VISITOR=true;					// Cree une methode accept(visiteur)
}

//
// PARSER DEFINITION
//

PARSER_BEGIN(Parser)

package analyzer.ast;

public class Parser
{
	public static ASTProgram ParseTree(java.io.InputStream input) throws ParseException
	{
		Parser c = new Parser(input);
		return c.Program();
	}
}

PARSER_END(Parser)

//
// LEXICAL ANALYSIS
//

// White space

SKIP :
{
	< ( " " | "\t" | "\n" | "\r" )+	>
}

// Comments

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}




// Keywords
TOKEN :
{
	< IF: "if"	> |
	< ELSE: "else" > |
	< STRING: "string"> |
	< INT: "int"> |
	< FLOAT: "float" > |
	< BOOL: "bool"> |
	< PRINT: "print" > |
	< INPUT: "input" > |
	< IN: "in" > |
	// Nos ajouts
	< WHILE: "while" > |
	< DO : "do">|
	<SWITCH: "switch">|
	<CASE: "case">|
	<SWTDEFAULT: "default">


	// À compléter au besoin
}

// Operators
TOKEN :
{
	< ASSIGN: < EQUAL >  > |
	< COMPARE: < LESS > | < LESSEQUAL > | < GREAT > | <GREATEQUAL > | < DIFF > | < EQUALEQUAL > > |
    < LOGIC: < AND > | < OR > > |
	< #LESS: "<" > |
	< #LESSEQUAL: "<=" > |
	< #GREAT: ">" > |
	< #GREATEQUAL: ">=" > |
	< #DIFF: "!=" > |
	< #EQUALEQUAL: "==" > |

	< PLUS: "+" > |
	< MINUS: "-" > |
	< FOIS: "*" > |
	< DIV: "/" > |
    < NOT: "!" > |

	< #EQUAL: "=" > |
	< LPAREN: "(" > |
	< RPAREN: ")" > |
	< LACC: "{" > |
	< RACC: "}" > |
	< COLON: ":" > |
	< SEMICOLON: ";" > |
	< COMMA: "," > |
	< #AND: "&&" > |
	< #OR: "||" >
	// À compléter au besoin
}


// Identifiers and numbers
TOKEN :
{
	< IDENTIFIER: <LETTER> ( <LETTER> | <DIGIT> )* > |
	< #LETTER: ["a"-"z","A"-"Z","_"] > |
	< #DIGIT: ["0"-"9"] > |
	< INTEGER: ["1"-"9"] (["0"-"9"])* | "0" > |
	// // Caution! Allows numbers such as "0000.23"
	< REAL: ((<INTEGER>)* "." (<INTEGER>)* )|(<DIGIT>"."(<INTEGER>)*["1"-"9"]"e"["-"]<INTEGER>)>//TODO
}







//
// SYNTAX ANALYSIS
//\

void WhileStmt() : {}
{
    <WHILE><LPAREN> Expr() <RPAREN>(<LACC> Block()<RACC> | Stmt() )
}

void doStmt() : {}
{
    <DO><LACC> Block()<RACC> <WHILE><LPAREN> Expr() <RPAREN><SEMICOLON>
}

void ifStmt():{}{
    <IF><LPAREN>Expr()<RPAREN>(<LACC> Block()<RACC> | Stmt() )
    [LOOKAHEAD(1)<ELSE>(<LACC> Block()<RACC> | Stmt() )]
}

void SwitchStmt():{}{
    <SWITCH><LPAREN> Expr() <RPAREN><LACC>
    (<CASE>Expr()<COLON>Stmt())+
    [<SWTDEFAULT><COLON>Stmt()]<RACC>
}




ASTProgram Program() : { }
{
	Block() <EOF> { return jjtThis;  }
}

void Block() : { }
{
	 ( Stmt() )*
}



void Stmt() : { }
{
	AssignStmt() <SEMICOLON> | WhileStmt() | doStmt() | ifStmt() | SwitchStmt()
}

void AssignStmt() : { Token t;}
{
	Identifier() <ASSIGN> IntExpr()
}

void Expr() : {}
{
    IntExpr()
}


void IntExpr() : {}
{
    LogicExpr()
}
//TODO
void LogicExpr():{ Token t;}{
    ComparisonExpr()(LOOKAHEAD(2)
            <LOGIC> ComparisonExpr()
        )*
}

void ComparisonExpr():{ Token t;}{
    IntAddExpr() (LOOKAHEAD(2)
            <COMPARE> IntAddExpr()
        )*
}

void IntAddExpr() : { Token t;}
{
    IntMultExpr() (LOOKAHEAD(2)
        (t = <PLUS> | t = <MINUS>) IntMultExpr()
    )*
}


void IntMultExpr() : { Token t;}
{
    IntNegExpr() (LOOKAHEAD(2)
        (t = <FOIS>) IntNegExpr()
    )*
}

void IntNegExpr() : {}
{
    [<MINUS>] (LogicNotExpr())
}

void LogicNotExpr() : {}
{
    [<NOT>](ParenthesesExpr())
}

void ParenthesesExpr():{}{
    <LPAREN>IntExpr()<RPAREN> | IntBasicExpr()
}


void IntBasicExpr() : {}
{
	LOOKAHEAD(2) Identifier() |
	IntValue()
}


void Identifier() : { Token t;}
{
	t = <IDENTIFIER> {jjtThis.setValue(t.image);}
}

void IntValue() : { Token t;}
{
	t = <INTEGER> {jjtThis.setValue(Integer.parseInt(t.image));}
}

void RealValue() : { Token t;}
{
	t = <REAL> {jjtThis.setValue(Double.parseDouble(t.image));}
}

